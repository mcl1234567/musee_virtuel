<?php

class Exploitation {
	private $connexion;

	function Exploitation() {
		$this->connexion = null;
	}

	// Connexion à la bdd.
	public function connexion() {
		try {
			// Configuration de la connexion.
			$options[PDO::MYSQL_ATTR_INIT_COMMAND] = "SET NAMES utf8";
			// Initialisation et envoie de la requête.
			$this->connexion = new PDO(BDD, SQL_USER, SQL_PWD, $options);
		} catch(PDOException $e) {
			die("Erreur de connexion : ".$e->getMessage());
		}
	}

	/**
	*	Renvoie les enregistrements pour les champs renseignés pour la table donnée.
	*	@param $table demandée
	*	@param $champs à afficher
	*	@param $champs_condition : WHERE
	*	@param $valeur_condition : WHERE
	*	@return Tableau des champs en entrée
	*/
	public function lister($champs, $champs_condition, $valeurs_condition, $table) {
		// Début de la requête.
		$sql = 'SELECT ';

		// Ecriture des champs à afficher.
		for($i=0; $i<sizeof($champs); $i++) {
			if($i == sizeof($champs)-1) {
				// Dernier champ à renseigner.
				$sql .= $champs[$i].' FROM '.$table;
			} else {
				$sql .= $champs[$i].', ';
			}
		}
		// Prédéfini pour afficher l'ensemble des informations de la table.
		if($champs[0] == 'ALL') {
			$sql = 'SELECT * FROM '.$table;
		}

		// Ecriture des conditions par défaut.
		$sql .= ' WHERE 1 = 1 ';
		// Ecriture des conditions.
		for($i=0; $i<sizeof($valeurs_condition); $i++) {
			// Ecriture des conditions numériques et leurs valeurs
			if(substr_compare($champs_condition[$i], 'nombre_', 0, 7) == 0 && $champs_condition[$i] != 'LIMIT' 
			|| substr_compare($champs_condition[$i], 'numero_', 0, 7) == 0 && $champs_condition[$i] != 'LIMIT') {
				$sql .= ' AND ';
				if($i == sizeof($champs_condition)-1) {
					// Dernier champ et  valeur à renseigner.
					$sql .= $champs_condition[$i].' = '.$valeurs_condition[$i].'';
				} else {
					$sql .= $champs_condition[$i].' = '.$valeurs_condition[$i];
				}
			} 
			// Ecriture des conditions alphanumériques et leurs valeurs
			else if($champs_condition[$i] != 'LIMIT') {
				$sql .= ' AND ';
				if($i == sizeof($valeurs_condition)-1) {
					// Ecriture de la dernière condition
					$sql .= $champs_condition[$i].' = "'.$valeurs_condition[$i].'"';
				} else {
					$sql .= $champs_condition[$i].' = "'.$valeurs_condition[$i].'"';
				}
			}
			// Ecriture des conditions de limites
			if($champs_condition[$i] == 'LIMIT') {
				$sql .= ' '.$valeurs_condition[$i];
			}
		}
		// Prédéfini pour afficher l'ensemble des informations de la table.
		if(sizeof($champs_condition) > 0 && $champs_condition[0] == 'COLUMNS') {
			$sql = 'SELECT * FROM presentation_table WHERE table_presentation = "'.$table.'"';
		}

		// Fin de la constitution de la requête. Envoi de la requête.
		try {
			$requete = $this->connexion->query($sql);
			if($requete != false) { 
				// 
				$requete = $requete->fetchAll();
				return $requete;
			}
		} catch(Exception $e) {
			die('Erreur: '.$e->getMessage());
		}
	}

	/**
	*	Insertion des enregistrements dans la bdd.
	*	@param String 						$table sélectionnée
	*	@param tableau de String 			$champs à renseigner
	*	@param tableau de type aléatoire	$valeur à insérer
	*/
	public function insertion($champs, $valeurs, $table) {
		try {
			$sql = 'INSERT INTO '.$table.' (';
			// Ecriture des champs à renseigner.
			for($i=0; $i<sizeof($champs); $i++) {
				if($i == sizeof($champs)-1) {
					// Dernier champ.
					$sql .= $champs[$i].') VALUES (';
				} else {
					$sql .= $champs[$i].', ';
				}
			}
			// Ecriture des valeurs à insérer. La procédure est d'insérer des '?'.
			for($i=0; $i<sizeof($champs); $i++) {				
				if($i == sizeof($champs)-1) {
					// Dernier champ.
					$sql .= '?)';
				} else {
					$sql .= '?, ';
				}
			}
			// Préparation de la requête
			// Exécution de la requête
			$this->connexion->prepare($sql)->execute($valeurs);
			// Récupération du dernier ID de la ligne d'enregistrement insérée.
			$numero = $this->connexion->lastInsertId();
		} catch(Exception $e) {
			die('Erreur : '.$e->getMessage());
		}
		return $numero;
	}

	/**
	 *  Modifie les enregistrements pour les champs rentrés en paramètre.
	 * @param String 				$champs
	 * @param String, date, int 	$valeurs
	 * @param tableau de String 	$champs_condition
	 * @param tableau de String 	$valeurs_condition
	 * @param String 				$table
	 */
	public function modification($champs, $champs_condition, $valeurs_condition, $valeurs, $table) {
		try {
			// Début de la requête de modification.
			$sql = 'UPDATE '.$table.' SET ';
			for($i=0; $i<sizeof($champs); $i++) {
				// Insertion des champs numériques à renseigner et valeurs à modifier de la requête.
				if(substr($champs[$i], 0, 7) == 'nombre_' 
				|| substr($champs[$i], 0, 7) == 'numero_' 
				|| substr($champs[$i], 0, 7) == 'dimension_' 
				|| substr($champs[$i], 0, 7) == 'delai_') {
					if($i == sizeof($champs)-1) {
						// Dernier champ.
						$sql .= $champs[$i].' = '.$valeurs[$i].' ';
					} else {
						$sql .= $champs[$i].' = '.$valeurs[$i].', ';
					}
				}
				// Insertion des champs alphanumériques à renseigner et valeurs à modifier de la requête.
				else {
					if($i == sizeof($champs)-1) {
						// Dernier champ.
						$sql .= $champs[$i].' = "'.$valeurs[$i].'" ';
					} else {
						$sql .= $champs[$i].' = "'.$valeurs[$i].'", ';
					}
				}
			}
			// Insertion des conditions et valeurs à renseigner ( numero_table = # ) de la requête.
			$sql .= 'WHERE '.$champs_condition.' = '.$valeurs_condition;
			// Préparation de la requête
			$req = $this->connexion->prepare($sql);
			// Exécution de la requête
			$req->execute($champs);
		} catch(Exception $e) {
			die('Erreur : '.$e->getMessage());
		}
	}

	/**
	*	Suppression d'une ligne par requête
	*	@param String 	$table demandée
	* 	@param int 		$numero de la ligne à supprimer
	*/
	public function suppression($champs_conditions, $valeurs_condition, $table) {
		try {
			// Début de la requête de suppression.
			$sql = 'DELETE FROM '.$table.' WHERE 1=1 AND ';
			for($i=0; $i<sizeof($champs_conditions); $i++) {
				// Insertion des conditions numériques de la requête.
				if(substr($champs_conditions[$i], 0, 7) == 'nombre_' 
				|| substr($champs_conditions[$i], 0, 7) == 'numero_' 
				|| substr($champs_conditions[$i], 0, 7) == 'dimension_' 
				|| substr($champs_conditions[$i], 0, 7) == 'delai_') {
					if($i == sizeof($champs_conditions)-1) {
						// Dernière condition.
						$sql .= $champs_conditions[$i].' = '.$valeurs_condition[$i].' ';
					} else {
						$sql .= $champs_conditions[$i].' = '.$valeurs_condition[$i].', ';
					}
				}
				// Insertion des conditions alphanumériques de la requête.
				else {
					if($i == sizeof($champs_conditions)-1) {
						// Dernière condition.
						$sql .= $champs_conditions[$i].' = "'.$valeurs_condition[$i].'" ';
					} else {
						$sql .= $champs_conditions[$i].' = "'.$valeurs_condition[$i].'", ';
					}
				}
			}
			// Exécution de la requête.
			$this->connexion->exec($sql);
		} catch(Exception $e) {
			die('Erreur: '.$e->getMessage());
		}
	}
}

?>